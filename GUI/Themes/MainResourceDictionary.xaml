<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic"
	xmlns:adonisExtensions="clr-namespace:AdonisUI.Extensions;assembly=AdonisUI"
	xmlns:adonisUI="clr-namespace:AdonisUI;assembly=AdonisUI"
	xmlns:appdata="clr-namespace:DivinityModManager.Models.App;assembly=DivinityModManagerCore"
	xmlns:behavior="clr-namespace:DivinityModManager.Controls.Behavior"
	xmlns:chrome="clr-namespace:Xceed.Wpf.Toolkit.Chromes;assembly=Xceed.Wpf.Toolkit"
	xmlns:controls="clr-namespace:DivinityModManager.Controls"
	xmlns:conv="clr-namespace:DivinityModManager.Converters"
	xmlns:dapp="clr-namespace:DivinityModManager;assembly=DivinityModManagerCore"
	xmlns:data="clr-namespace:DivinityModManager.Models;assembly=DivinityModManagerCore"
	xmlns:dd="urn:gong-wpf-dragdrop"
	xmlns:divThemes="clr-namespace:DivinityModManager.Themes"
	xmlns:dmcore="clr-namespace:DivinityModManager;assembly=DivinityModManagerCore"
	xmlns:local="clr-namespace:DivinityModManager.Views"
	xmlns:sys="clr-namespace:System;assembly=mscorlib"
	xmlns:templateSelectors="clr-namespace:DivinityModManager.Controls.TemplateSelectors"
	xmlns:vm="clr-namespace:DivinityModManager.ViewModels;assembly=DivinityModManagerCore"
	xmlns:xc="http://schemas.xceed.com/wpf/xaml/toolkit"
	xmlns:xconv="clr-namespace:Xceed.Wpf.Toolkit.Converters;assembly=Xceed.Wpf.Toolkit"
	xmlns:xcthemes="clr-namespace:Xceed.Wpf.Toolkit.Themes;assembly=Xceed.Wpf.Toolkit"
	x:Name="MainResources">
	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="DefaultStyles/ComboBox.xaml" />
	</ResourceDictionary.MergedDictionaries>
	<conv:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
	<conv:BoolToVisibilityConverterReversed x:Key="BoolToVisibilityConverterReversed" />
	<conv:ModIsAvailableConverter x:Key="ModIsAvailableConverter" />
	<conv:StringToUriConverter x:Key="StringToUriConverter" />
	<conv:DivinityGameLaunchWindowActionToStringConverter x:Key="GameLaunchActionToStringConverter" />
	<conv:IntToVisibilityConverter x:Key="IntToVisibilityConverter" />
	<conv:StringNotEmptyToVisibilityConverter x:Key="StringNotEmptyToVisibilityConverter" />
	<conv:StringToSolidBrushConverter x:Key="StringToSolidBrushConverter" />
	<conv:StringToLinearBrushConverter x:Key="StringToLinearBrushConverter" />
	<xconv:ProgressBarWidthConverter x:Key="ProgressBarWidthConverter" />
	<templateSelectors:TagTemplateSelector x:Key="TagTemplateSelector" />
	<BitmapImage x:Key="SaveImage" UriSource="pack://application:,,,/Resources/Icons/Save_16x.png" />
	<BitmapImage x:Key="SaveAsImage" UriSource="pack://application:,,,/Resources/Icons/SaveAs_16x.png" />
	<BitmapImage x:Key="SaveDisabledImage" UriSource="pack://application:,,,/Resources/Icons/SaveGrey_16x.png" />
	<BitmapImage x:Key="AddItemImage" UriSource="pack://application:,,,/Resources/Icons/AddItem_16x.png" />
	<BitmapImage x:Key="ExportDataImage" UriSource="pack://application:,,,/Resources/Icons/ExportData_16x.png" />
	<BitmapImage x:Key="OpenFolderImage" UriSource="pack://application:,,,/Resources/Icons/OpenFolder_16x.png" />
	<BitmapImage x:Key="RefreshImage" UriSource="pack://application:,,,/Resources/Icons/Refresh_16x.png" />
	<BitmapImage x:Key="ExpandDownImage" UriSource="pack://application:,,,/Resources/Icons/ExpandChevronDown_16x.png" />
	<BitmapImage x:Key="ExpandDownImageDisabled" UriSource="pack://application:,,,/Resources/Icons/ExpandChevronDown_lightGray_16x.png" />
	<BitmapImage x:Key="ExpandUpImage" UriSource="pack://application:,,,/Resources/Icons/ExpandChevronUp_16x.png" />
	<BitmapImage x:Key="ExpandUpImageDisabled" UriSource="pack://application:,,,/Resources/Icons/ExpandChevronUp_lightGrey_16x.png" />
	<BitmapImage x:Key="OpenGameImage" UriSource="pack://application:,,,/Resources/Icons/DivinityOS2_EoCApp_16x.png" />
	<BitmapImage x:Key="OpenSteamWorkshopFolderImage" UriSource="pack://application:,,,/Resources/Icons/Steam_16x.png" />
	<BitmapImage x:Key="OpenInBrowserImage" UriSource="pack://application:,,,/Resources/Icons/BrowserLink_16x.png" />
	<BitmapImage x:Key="LogImage" UriSource="pack://application:,,,/Resources/Icons/Log_Normal_32x.png" />
	<BitmapImage x:Key="OpenDonationLinkImage" UriSource="pack://application:,,,/Resources/Icons/Kofi_16x.png" />
	<BitmapImage x:Key="OpenRepoLinkImage" UriSource="pack://application:,,,/Resources/Icons/Github_16x.png" />
	<BitmapImage x:Key="DefaultIcon" UriSource="pack://application:,,,/Resources/Icons/DefaultIcon_16x.png" />
	<BitmapImage x:Key="ExportScriptImage" UriSource="pack://application:,,,/Resources/Icons/ExportScript_16x.png" />
	<BitmapImage x:Key="ZipFileImage" UriSource="pack://application:,,,/Resources/Icons/ZipFile_16x.png" />
	<BitmapImage x:Key="ZipFileAsImage" UriSource="pack://application:,,,/Resources/Icons/ZipFileAs_16x.png" />
	<BitmapImage x:Key="StatusWarning" UriSource="pack://application:,,,/Resources/Icons/StatusWarning_16x.png" />
	<BitmapImage x:Key="DivinityEngine" UriSource="pack://application:,,,/Resources/Icons/DivinityEngineGlasses_64x.png" />
	<BitmapImage x:Key="AlertBar_Close" UriSource="pack://application:,,,/Resources/Icons/AlertBar_Close.png" />
	<BitmapImage x:Key="AlertBar_Close_Hover" UriSource="pack://application:,,,/Resources/Icons/AlertBar_Close_Hover.png" />
	<BitmapImage x:Key="AlertBar_Danger" UriSource="pack://application:,,,/Resources/Icons/AlertBar_Danger_16x.png" />
	<BitmapImage x:Key="AlertBar_Information" UriSource="pack://application:,,,/Resources/Icons/AlertBar_Information_16x.png" />
	<BitmapImage x:Key="AlertBar_Success" UriSource="pack://application:,,,/Resources/Icons/AlertBar_Success_16x.png" />
	<BitmapImage x:Key="AlertBar_Warning" UriSource="pack://application:,,,/Resources/Icons/AlertBar_Warning_16x.png" />
	<BitmapImage x:Key="DivinityEngine2" UriSource="pack://application:,,,/Resources/Icons/DivinityEngine2_64x.png" />
	<BitmapImage x:Key="CopyToClipboardImage" UriSource="pack://application:,,,/Resources/Icons/CopyToClipboard_16x.png" />
	<BitmapImage x:Key="RenameFileImage" UriSource="pack://application:,,,/Resources/Icons/Rename_16x.png" />
	<BitmapImage x:Key="LoadCampaignOrderImage" UriSource="pack://application:,,,/Resources/Icons/LoadCampaignOrder_16x.png" />
	<BitmapImage x:Key="DeleteModImage" UriSource="pack://application:,,,/Resources/Icons/DeleteAzureResource_16x.png" />
	<!--  Overrides the default context menu open animation to remove flickering.  -->
	<PopupAnimation x:Key="{x:Static SystemParameters.MenuPopupAnimationKey}">None</PopupAnimation>
	<Style
		x:Key="IconButtonStyle"
		BasedOn="{StaticResource {x:Type Button}}"
		TargetType="Button">
		<Setter Property="Width" Value="24" />
		<Setter Property="Height" Value="24" />
		<Setter Property="Margin" Value="2,0,2,0" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
		<Setter Property="Background" Value="{DynamicResource {x:Static adonisUI:Brushes.Layer0BackgroundBrush}}" />
		<Setter Property="BorderThickness" Value="0" />
	</Style>
	<Style TargetType="{x:Type controls:AutoGrayableImage}">
		<Setter Property="Width" Value="16" />
		<Setter Property="Height" Value="16" />
		<Setter Property="MaxWidth" Value="16" />
		<Setter Property="MaxHeight" Value="16" />
		<Setter Property="HorizontalAlignment" Value="Center" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="Stretch" Value="Uniform" />
		<Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="UseLayoutRounding" Value="True" />
	</Style>
	<Style x:Key="VerticalSeparator" TargetType="Rectangle">
		<Setter Property="Width" Value="1" />
		<Setter Property="Margin" Value="16,0,16,0" />
		<Setter Property="VerticalAlignment" Value="Stretch" />
		<Setter Property="Fill" Value="{DynamicResource {x:Static adonisUI:Brushes.DisabledForegroundBrush}}" />
	</Style>
	<Style BasedOn="{StaticResource {x:Type TextBox}}" TargetType="{x:Type controls:UnfocusableTextBox}" />
	<Style BasedOn="{StaticResource {x:Type ToolTip}}" TargetType="{x:Type ToolTip}">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="HasDropShadow" Value="True" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUI:Brushes.ForegroundBrush}}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToolTip">
					<Border
						Name="Border"
						Width="{TemplateBinding Width}"
						Height="{TemplateBinding Height}"
						Padding="4"
						Background="{DynamicResource {x:Static adonisUI:Brushes.Layer4BackgroundBrush}}"
						BorderBrush="{DynamicResource {x:Static adonisUI:Brushes.AccentInteractionBorderBrush}}"
						BorderThickness="2">
						<ContentPresenter
							Margin="4"
							HorizontalAlignment="Left"
							VerticalAlignment="Top" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="HasDropShadow" Value="true">
							<Setter TargetName="Border" Property="CornerRadius" Value="4" />
							<Setter TargetName="Border" Property="SnapsToDevicePixels" Value="true" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<DataTemplate DataType="{x:Type data:DivinityProfileData}">
		<TextBlock Text="{Binding Name}" />
	</DataTemplate>
	<DataTemplate DataType="{x:Type data:DivinityLoadOrder}">
		<TextBlock Text="{Binding Name}" />
	</DataTemplate>
	<!--<DataTemplate DataType="{x:Type data:DivinityModSeparator}">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="*" />
				<RowDefinition Height="Auto" />
			</Grid.RowDefinitions>
			<Rectangle Fill="Orange" Opacity="0.2" IsHitTestVisible="False" />
			<TextBlock Text="Unordered Mods:" Background="Transparent" Margin="4" />
			<Separator BorderThickness="1" BorderBrush="Orange" Grid.Row="1" />
		</Grid>
	</DataTemplate>-->
	<DataTemplate DataType="{x:Type data:DivinityModDependencyData}">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="Auto" />
			</Grid.ColumnDefinitions>
			<Grid.Resources>
				<Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="{x:Type TextBlock}">
					<Style.Triggers>
						<DataTrigger Binding="{Binding Converter={StaticResource ModIsAvailableConverter}}" Value="True">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUI:Brushes.SuccessBrush}}" />
						</DataTrigger>
						<DataTrigger Binding="{Binding Converter={StaticResource ModIsAvailableConverter}}" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUI:Brushes.ErrorBrush}}" />
							<Setter Property="FontWeight" Value="Bold" />
						</DataTrigger>
					</Style.Triggers>
				</Style>
			</Grid.Resources>
			<TextBlock Text="{Binding Name}" />
			<StackPanel
				Grid.Column="1"
				Margin="4,0,0,0"
				Orientation="Horizontal">
				<TextBlock Text="v" />
				<TextBlock Grid.Column="1" Text="{Binding Version.Version}" />
			</StackPanel>
		</Grid>
	</DataTemplate>
	<Style
		x:Key="DivinityModDataListItem"
		BasedOn="{StaticResource {x:Type ListViewItem}}"
		TargetType="{x:Type ListViewItem}">
		<Setter Property="behavior:ScreenReaderHelperBehavior.Automatic" Value="True" />
		<!--<Style.Resources>
			<LinearGradientBrush x:Key="ListItemHoverFill_Selected" StartPoint="0,0" EndPoint="0,1">
				<GradientStop Offset="0" Color="#FFD1FFD1" />
				<GradientStop Offset="1" Color="#FFA3FFAB" />
			</LinearGradientBrush>
		</Style.Resources>-->
		<Setter Property="Tag" Value="{Binding}" />
		<Setter Property="ContextMenu">
			<Setter.Value>
				<ContextMenu DataContext="{Binding RelativeSource={RelativeSource Mode=Self}, Path=PlacementTarget.Tag}">
					<ContextMenu.Resources>
						<Style BasedOn="{StaticResource {x:Type Image}}" TargetType="Image">
							<Setter Property="Width" Value="16" />
							<Setter Property="Height" Value="16" />
						</Style>
					</ContextMenu.Resources>
					<MenuItem
						Command="{Binding Path=OpenInFileExplorerCommand, Source={x:Static dapp:DivinityApp.Commands}}"
						CommandParameter="{Binding FilePath}"
						Header="Open in File Explorer...">
						<MenuItem.Icon>
							<Image Source="{StaticResource OpenFolderImage}" />
						</MenuItem.Icon>
					</MenuItem>
					<MenuItem Command="{Binding OpenWorkshopPageCommand}" Header="Open Steam Workshop Page (Browser)...">
						<MenuItem.Icon>
							<Image Source="{StaticResource OpenInBrowserImage}" />
						</MenuItem.Icon>
					</MenuItem>
					<MenuItem Command="{Binding OpenWorkshopPageInSteamCommand}" Header="Open Steam Workshop Page (Steam)...">
						<MenuItem.Icon>
							<Image Source="{StaticResource OpenSteamWorkshopFolderImage}" />
						</MenuItem.Icon>
					</MenuItem>
					<MenuItem
						Command="{Binding Path=DeleteModCommand, Source={x:Static dapp:DivinityApp.Commands}}"
						CommandParameter="{Binding}"
						Header="Delete Mod..."
						IsEnabled="{Binding CanDelete}">
						<MenuItem.Icon>
							<Image Source="{StaticResource DeleteModImage}" />
						</MenuItem.Icon>
					</MenuItem>
					<MenuItem Command="{Binding Path=ToggleNameDisplayCommand, Source={x:Static dapp:DivinityApp.Commands}}" CommandParameter="{Binding}">
						<MenuItem.Header>
							<TextBlock>
								<TextBlock.Style>
									<Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="TextBlock">
										<Setter Property="Text" Value="Show File Name" />
										<Style.Triggers>
											<DataTrigger Binding="{Binding DisplayFileForName}" Value="true">
												<Setter Property="Text" Value="Show Mod Display Name" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</TextBlock.Style>
							</TextBlock>
						</MenuItem.Header>
						<MenuItem.Icon>
							<Image Source="{StaticResource RenameFileImage}" />
						</MenuItem.Icon>
					</MenuItem>
					<MenuItem
						Command="{Binding Path=CopyToClipboardCommand, Source={x:Static dapp:DivinityApp.Commands}}"
						CommandParameter="{Binding UUID}"
						Header="Copy UUID to Clipboard"
						Visibility="{Binding Path=(dapp:DivinityApp.DeveloperModeEnabled), Converter={StaticResource BoolToVisibilityConverter}}">
						<MenuItem.Icon>
							<Image Source="{StaticResource CopyToClipboardImage}" />
						</MenuItem.Icon>
					</MenuItem>
					<MenuItem
						Command="{Binding Path=CopyToClipboardCommand, Source={x:Static dapp:DivinityApp.Commands}}"
						CommandParameter="{Binding Folder}"
						Header="Copy FolderName to Clipboard"
						Visibility="{Binding Path=(dapp:DivinityApp.DeveloperModeEnabled), Converter={StaticResource BoolToVisibilityConverter}}">
						<MenuItem.Icon>
							<Image Source="{StaticResource CopyToClipboardImage}" />
						</MenuItem.Icon>
					</MenuItem>
				</ContextMenu>
			</Setter.Value>
		</Setter>
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<!--<Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />-->
		<Setter Property="Visibility" Value="{Binding Visibility, FallbackValue='Visible'}" />
		<Setter Property="FocusVisualStyle">
			<Setter.Value>
				<Style>
					<Setter Property="Control.Template">
						<Setter.Value>
							<ControlTemplate>
								<Rectangle
									SnapsToDevicePixels="true"
									Stroke="{DynamicResource {x:Static adonisUI:Brushes.AccentIntenseHighlightBorderBrush}}"
									StrokeThickness="2" />
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding HasColorOverride}" Value="True" />
					<Condition Binding="{Binding IsSelected}" Value="False" />
				</MultiDataTrigger.Conditions>
				<MultiDataTrigger.Setters>
					<Setter Property="Background" Value="{Binding ListColor, Converter={StaticResource StringToSolidBrushConverter}}" />
				</MultiDataTrigger.Setters>
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding HasColorOverride}" Value="True" />
					<Condition Binding="{Binding IsSelected}" Value="True" />
				</MultiDataTrigger.Conditions>
				<MultiDataTrigger.Setters>
					<Setter Property="Background" Value="{Binding SelectedColor, Converter={StaticResource StringToLinearBrushConverter}}" />
				</MultiDataTrigger.Setters>
			</MultiDataTrigger>
		</Style.Triggers>
	</Style>
	<Style
		x:Key="DivinityModUpdateNewListItem"
		BasedOn="{StaticResource {x:Type ListViewItem}}"
		TargetType="{x:Type ListViewItem}">
		<Setter Property="Tag" Value="{Binding}" />
		<Setter Property="ContextMenu">
			<Setter.Value>
				<ContextMenu DataContext="{Binding RelativeSource={RelativeSource Mode=Self}, Path=PlacementTarget.Tag}">
					<MenuItem
						Command="{Binding Path=OpenInFileExplorerCommand, Source={x:Static dapp:DivinityApp.Commands}}"
						CommandParameter="{Binding FilePath}"
						Header="Open in File Explorer..." />
					<MenuItem Command="{Binding OpenWorkshopPageCommand}" Header="Open Steam Workshop Page (Browser)...">
						<MenuItem.Icon>
							<Image Source="{StaticResource OpenInBrowserImage}" />
						</MenuItem.Icon>
					</MenuItem>
					<MenuItem Command="{Binding OpenWorkshopPageInSteamCommand}" Header="Open Steam Workshop Page (Steam)...">
						<MenuItem.Icon>
							<Image Source="{StaticResource OpenSteamWorkshopFolderImage}" />
						</MenuItem.Icon>
					</MenuItem>
					<MenuItem Command="{Binding Path=ToggleNameDisplayCommand, Source={x:Static dapp:DivinityApp.Commands}}" CommandParameter="{Binding}">
						<MenuItem.Header>
							<TextBlock>
								<TextBlock.Style>
									<Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="TextBlock">
										<Setter Property="Text" Value="Show File Name" />
										<Style.Triggers>
											<DataTrigger Binding="{Binding DisplayFileForName}" Value="true">
												<Setter Property="Text" Value="Show Mod Display Name" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</TextBlock.Style>
							</TextBlock>
						</MenuItem.Header>
					</MenuItem>
				</ContextMenu>
			</Setter.Value>
		</Setter>
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
	</Style>
	<Style
		x:Key="DivinityModUpdateListItem"
		BasedOn="{StaticResource DivinityModUpdateNewListItem}"
		TargetType="{x:Type ListViewItem}">
		<Setter Property="Tag" Value="{Binding WorkshopMod}" />
	</Style>
	<Style BasedOn="{StaticResource {x:Type ListView}}" TargetType="controls:ModListView">
		<Setter Property="Background" Value="{DynamicResource {x:Static adonisUI:Brushes.Layer4BackgroundBrush}}" />
	</Style>
	<Style
		x:Key="ModOrderListView"
		BasedOn="{StaticResource {x:Type ListView}}"
		TargetType="ListView">
		<Setter Property="KeyboardNavigation.AcceptsReturn" Value="False" />
		<Setter Property="KeyboardNavigation.TabNavigation" Value="Continue" />
		<Setter Property="dd:DragDrop.IsDragSource" Value="True" />
		<Setter Property="dd:DragDrop.IsDropTarget" Value="True" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource DivinityModDataListItem}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type controls:ModListView}">
					<Grid>
						<ScrollViewer Name="ListScrollViewer" Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
							<ItemsPresenter x:Name="ListItemsPresenter" />
						</ScrollViewer>
						<Rectangle
							Name="DisabledRect"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							Fill="{DynamicResource {x:Static divThemes:DivinityColors.ListInactiveBrush}}"
							IsHitTestVisible="False"
							KeyboardNavigation.IsTabStop="False"
							Visibility="Collapsed" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsGrouping" Value="True">
							<Setter TargetName="ListScrollViewer" Property="CanContentScroll" Value="False" />
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}}" Value="False" />
								<Condition Binding="{Binding Path=(dapp:DivinityApp.IsKeyboardNavigating)}" Value="True" />
							</MultiDataTrigger.Conditions>
							<MultiDataTrigger.Setters>
								<Setter TargetName="DisabledRect" Property="Visibility" Value="Visible" />
							</MultiDataTrigger.Setters>
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<DataTemplate x:Key="TagTemplate">
		<Border
			Background="{DynamicResource {x:Static divThemes:DivinityColors.TagBackgroundBrush}}"
			BorderThickness="2"
			CornerRadius="12">
			<TextBlock
				Padding="12,2"
				Foreground="{DynamicResource {x:Static adonisUI:Brushes.Layer3InteractionForegroundBrush}}"
				Text="{Binding}">
				<TextBlock.Effect>
					<DropShadowEffect
						BlurRadius="4"
						Direction="330"
						Opacity="0.5"
						ShadowDepth="4"
						Color="Black" />
				</TextBlock.Effect>
			</TextBlock>
			<Border.Effect>
				<DropShadowEffect
					BlurRadius="4"
					Direction="330"
					Opacity="0.35"
					ShadowDepth="2"
					Color="Black" />
			</Border.Effect>
		</Border>
	</DataTemplate>
	<DataTemplate x:Key="ModeTagTemplate">
		<Border
			Background="{DynamicResource {x:Static divThemes:DivinityColors.ModeTagBackgroundBrush}}"
			BorderThickness="2"
			CornerRadius="12">
			<TextBlock
				Padding="12,2"
				Foreground="{DynamicResource {x:Static adonisUI:Brushes.Layer3InteractionForegroundBrush}}"
				Text="{Binding}">
				<TextBlock.Effect>
					<DropShadowEffect
						BlurRadius="4"
						Direction="330"
						Opacity="0.5"
						ShadowDepth="4"
						Color="Black" />
				</TextBlock.Effect>
			</TextBlock>
			<Border.Effect>
				<DropShadowEffect
					BlurRadius="4"
					Direction="330"
					Opacity="0.35"
					ShadowDepth="2"
					Color="Black" />
			</Border.Effect>
		</Border>
	</DataTemplate>
	<DataTemplate x:Key="CustomTagTemplate">
		<Border
			Background="{DynamicResource {x:Static divThemes:DivinityColors.CustomTagBackgroundBrush}}"
			BorderThickness="2"
			CornerRadius="12">
			<TextBlock
				Padding="12,2"
				Foreground="{DynamicResource {x:Static adonisUI:Brushes.Layer3InteractionForegroundBrush}}"
				Text="{Binding}">
				<TextBlock.Effect>
					<DropShadowEffect
						BlurRadius="4"
						Direction="330"
						Opacity="0.5"
						ShadowDepth="4"
						Color="Black" />
				</TextBlock.Effect>
			</TextBlock>
			<Border.Effect>
				<DropShadowEffect
					BlurRadius="4"
					Direction="330"
					Opacity="0.35"
					ShadowDepth="2"
					Color="Black" />
			</Border.Effect>
		</Border>
	</DataTemplate>
	<controls:AutomationTooltip x:Key="ModToolTip" DataContext="{Binding RelativeSource={RelativeSource Mode=Self}, Path=PlacementTarget.Tag}">
		<controls:AutomationTooltip.Style>
			<Style BasedOn="{StaticResource {x:Type ToolTip}}" TargetType="controls:AutomationTooltip">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="controls:AutomationTooltip">
							<Border
								Padding="8"
								Background="{DynamicResource {x:Static adonisUI:Brushes.Layer4BackgroundBrush}}"
								BorderBrush="{DynamicResource {x:Static adonisUI:Brushes.AccentInteractionBorderBrush}}"
								BorderThickness="2">
								<ContentPresenter />
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		</controls:AutomationTooltip.Style>
		<StackPanel
			MaxWidth="700"
			Background="Transparent"
			Orientation="Vertical">
			<StackPanel.Resources>
				<Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="TextBlock">
					<Setter Property="TextWrapping" Value="Wrap" />
					<Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUI:Brushes.ForegroundBrush}}" />
					<!--<Setter Property="FontFamily" Value="Arial" />-->
				</Style>
				<Style BasedOn="{StaticResource {x:Type ListBox}}" TargetType="ListBox" />
			</StackPanel.Resources>
			<StackPanel Orientation="Horizontal">
				<TextBlock
					Margin="2"
					FontSize="16"
					FontWeight="Bold"
					Foreground="{DynamicResource {x:Static adonisUI:Brushes.AlertBrush}}"
					Text="{Binding Name}">
					<TextBlock.Effect>
						<DropShadowEffect
							BlurRadius="4"
							Direction="330"
							Opacity="0.25"
							ShadowDepth="2"
							Color="Black" />
					</TextBlock.Effect>
				</TextBlock>
				<TextBlock
					Margin="2"
					Foreground="Red"
					Text=" (Classic)"
					Visibility="{Binding IsClassicMod, Converter={StaticResource BoolToVisibilityConverter}}" />
				<TextBlock
					Margin="2"
					Foreground="Lime"
					Text=" (Definitive Edition)"
					Visibility="{Binding IsClassicMod, Converter={StaticResource BoolToVisibilityConverterReversed}}" />
			</StackPanel>
			<Separator Background="{DynamicResource {x:Static adonisUI:Brushes.Layer1HighlightBorderBrush}}" />
			<TextBlock
				Margin="2"
				TextWrapping="Wrap"
				Visibility="{Binding AuthorVisibility}"><Run Text="Created by " /><Run
					FontWeight="Bold"
					Foreground="#3da2fa"
					Text="{Binding Author}" />
				<TextBlock.Effect>
					<DropShadowEffect
						BlurRadius="4"
						Direction="330"
						Opacity="0.25"
						ShadowDepth="3"
						Color="Black" />
				</TextBlock.Effect>
			</TextBlock>
			<TextBlock
				Margin="2"
				Text="{Binding Description}"
				TextWrapping="Wrap"
				Visibility="{Binding DescriptionVisibility}" />
			<StackPanel
				Margin="2"
				Orientation="Vertical"
				Visibility="{Binding DependencyVisibility, FallbackValue=Collapsed}">
				<TextBlock FontWeight="Bold" Text="Dependencies:" />
				<ListBox
					Margin="2"
					Padding="0"
					BorderBrush="{DynamicResource {x:Static adonisUI:Brushes.AccentInteractionBorderBrush}}"
					BorderThickness="1"
					ItemsSource="{Binding DisplayedDependencies}" />
			</StackPanel>
			<StackPanel
				Margin="2"
				DataContext="{Binding}"
				Orientation="Vertical">
				<StackPanel.Resources>
					<CollectionViewSource x:Key="TagsSource" Source="{Binding Tags}" />
					<CollectionViewSource x:Key="ModesSource" Source="{Binding Modes}" />
					<CompositeCollection x:Key="CombinedTags">
						<CollectionContainer Collection="{Binding Source={StaticResource TagsSource}}" />
						<CollectionContainer Collection="{Binding Source={StaticResource ModesSource}}" />
					</CompositeCollection>
				</StackPanel.Resources>
				<ItemsControl ItemTemplateSelector="{StaticResource TagTemplateSelector}" ItemsSource="{StaticResource CombinedTags}">
					<ItemsControl.ItemsPanel>
						<ItemsPanelTemplate>
							<StackPanel Orientation="Horizontal" />
						</ItemsPanelTemplate>
					</ItemsControl.ItemsPanel>
					<ItemsControl.Style>
						<Style>
							<Style.Triggers>
								<DataTrigger Binding="{Binding}" />
							</Style.Triggers>
						</Style>
					</ItemsControl.Style>
				</ItemsControl>
			</StackPanel>
			<StackPanel Orientation="Vertical">
				<Separator Background="{DynamicResource {x:Static adonisUI:Brushes.Layer1HighlightBorderBrush}}" />
				<TextBlock
					Margin="2"
					Text="{Binding FileName}"
					Visibility="{Binding IsEditorMod, Converter={StaticResource BoolToVisibilityConverterReversed}, FallbackValue=Collapsed}" />
				<TextBlock Margin="2" Visibility="{Binding HasScriptExtenderSettings, Converter={StaticResource BoolToVisibilityConverter}}">
					<Run Foreground="Goldenrod" Text="Script Extender " /><Run Foreground="Lime" Text="v" /><Run Foreground="Lime" Text="{Binding OsiExtenderData.RequiredExtensionVersion}" />
				</TextBlock>
				<TextBlock Margin="2">
					<Run Text="Last Updated on " /><Run Text="{Binding LastUpdated, StringFormat={x:Static dapp:DivinityApp.DateTimeTooltipFormat}}" />
				</TextBlock>
			</StackPanel>
			<StackPanel
				Margin="2"
				Orientation="Vertical"
				Visibility="{Binding HasBuiltinOverride, Converter={StaticResource BoolToVisibilityConverter}, FallbackValue=Collapsed}">
				<Separator Background="{DynamicResource {x:Static adonisUI:Brushes.Layer1HighlightBorderBrush}}" />
				<TextBlock Foreground="OrangeRed">
					This mod overrides base game files directly.<LineBreak />
					As long as this mod exists in the Mods folder,<LineBreak />
					these files will be overwritten, even if the mod is disabled.</TextBlock>
				<TextBlock Text="If this is intended, you can ignore this warning." />
				<TextBlock Foreground="OrangeRed" Text="Overwritten builtin folders:" />
				<TextBlock Text="{Binding BuiltinOverrideModsText}" />
			</StackPanel>
		</StackPanel>
	</controls:AutomationTooltip>
	<Style
		x:Key="AdventureModTooltipStyle"
		BasedOn="{StaticResource {x:Type ToolTip}}"
		TargetType="controls:AutomationTooltip">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToolTip">
					<Border
						Padding="8"
						Background="{DynamicResource {x:Static adonisUI:Brushes.Layer4BackgroundBrush}}"
						BorderBrush="{DynamicResource {x:Static adonisUI:Brushes.AccentInteractionBorderBrush}}"
						BorderThickness="2">
						<ContentPresenter />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<controls:AutomationTooltip
		x:Key="AdventureModTooltip"
		DataContext="{Binding RelativeSource={RelativeSource Mode=Self}, Path=PlacementTarget.Tag}"
		Style="{StaticResource AdventureModTooltipStyle}">
		<StackPanel
			MaxWidth="700"
			Background="Transparent"
			Orientation="Vertical">
			<StackPanel.Resources>
				<Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="TextBlock">
					<Setter Property="TextWrapping" Value="Wrap" />
					<Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUI:Brushes.ForegroundBrush}}" />
					<!--<Setter Property="FontFamily" Value="Arial" />-->
				</Style>
				<Style BasedOn="{StaticResource {x:Type ListBox}}" TargetType="ListBox" />
			</StackPanel.Resources>
			<StackPanel Orientation="Horizontal">
				<TextBlock
					Margin="2"
					FontSize="16"
					FontWeight="Bold"
					Foreground="{DynamicResource {x:Static adonisUI:Brushes.AlertBrush}}"
					Text="{Binding Name}">
					<TextBlock.Effect>
						<DropShadowEffect
							BlurRadius="4"
							Direction="330"
							Opacity="0.5"
							ShadowDepth="4"
							Color="Black" />
					</TextBlock.Effect>
				</TextBlock>
				<TextBlock
					Margin="2"
					Foreground="Red"
					Text=" (Classic)"
					Visibility="{Binding IsClassicMod, Converter={StaticResource BoolToVisibilityConverter}}" />
				<TextBlock
					Margin="2"
					Foreground="Lime"
					Text=" (Definitive Edition)"
					Visibility="{Binding IsClassicMod, Converter={StaticResource BoolToVisibilityConverterReversed}}" />
			</StackPanel>
			<Separator Background="{DynamicResource {x:Static adonisUI:Brushes.Layer1HighlightBorderBrush}}" />
			<TextBlock
				Margin="2"
				TextWrapping="Wrap"
				Visibility="{Binding AuthorVisibility, FallbackValue=Collapsed}"><Run Text="Created by " /><Run
					FontWeight="Bold"
					Foreground="#3da2fa"
					Text="{Binding Author}" />
				<TextBlock.Effect>
					<DropShadowEffect
						BlurRadius="4"
						Direction="330"
						Opacity="0.5"
						ShadowDepth="4"
						Color="Black" />
				</TextBlock.Effect>
			</TextBlock>
			<TextBlock
				Margin="2"
				Text="{Binding Description}"
				TextWrapping="Wrap"
				Visibility="{Binding Description, Converter={StaticResource StringNotEmptyToVisibilityConverter}, FallbackValue=Collapsed}" />
			<StackPanel
				Margin="2"
				Orientation="Vertical"
				Visibility="{Binding DependencyVisibility, FallbackValue=Collapsed}">
				<TextBlock FontWeight="Bold" Text="Dependencies:" />
				<ListBox
					Margin="2"
					Padding="0"
					BorderBrush="{DynamicResource {x:Static adonisUI:Brushes.AccentInteractionBorderBrush}}"
					BorderThickness="1"
					ItemsSource="{Binding DisplayedDependencies}" />
			</StackPanel>
			<StackPanel
				Margin="2"
				DataContext="{Binding}"
				Orientation="Vertical">
				<StackPanel.Resources>
					<CollectionViewSource x:Key="TagsSource" Source="{Binding Tags}" />
					<CollectionViewSource x:Key="ModesSource" Source="{Binding Modes}" />
					<CompositeCollection x:Key="CombinedTags">
						<Border
							Background="{DynamicResource {x:Static divThemes:DivinityColors.ModeTagBackgroundBrush}}"
							BorderThickness="2"
							CornerRadius="12">
							<TextBlock
								Padding="12,2"
								Foreground="{DynamicResource {x:Static adonisUI:Brushes.Layer3InteractionForegroundBrush}}"
								Text="Adventure">
								<TextBlock.Effect>
									<DropShadowEffect
										BlurRadius="4"
										Direction="330"
										Opacity="0.5"
										ShadowDepth="4"
										Color="Black" />
								</TextBlock.Effect>
							</TextBlock>
							<Border.Effect>
								<DropShadowEffect
									BlurRadius="4"
									Direction="330"
									Opacity="0.35"
									ShadowDepth="2"
									Color="Black" />
							</Border.Effect>
						</Border>
						<CollectionContainer Collection="{Binding Source={StaticResource TagsSource}}" />
						<CollectionContainer Collection="{Binding Source={StaticResource ModesSource}}" />
					</CompositeCollection>
				</StackPanel.Resources>
				<ItemsControl ItemTemplateSelector="{StaticResource TagTemplateSelector}" ItemsSource="{StaticResource CombinedTags}">
					<ItemsControl.ItemsPanel>
						<ItemsPanelTemplate>
							<StackPanel Orientation="Horizontal" />
						</ItemsPanelTemplate>
					</ItemsControl.ItemsPanel>
					<ItemsControl.Style>
						<Style>
							<Style.Triggers>
								<DataTrigger Binding="{Binding}" />
							</Style.Triggers>
						</Style>
					</ItemsControl.Style>
				</ItemsControl>
			</StackPanel>
			<StackPanel Orientation="Vertical" Visibility="{Binding FileName, Converter={StaticResource StringNotEmptyToVisibilityConverter}, FallbackValue=Collapsed}">
				<Separator Background="{DynamicResource {x:Static adonisUI:Brushes.Layer1HighlightBorderBrush}}" />
				<TextBlock Margin="2" Text="{Binding FileName}" />
			</StackPanel>
		</StackPanel>
	</controls:AutomationTooltip>
	<controls:AutomationTooltip
		x:Key="GMCampaignTooltip"
		DataContext="{Binding RelativeSource={RelativeSource Mode=Self}, Path=PlacementTarget.Tag}"
		Style="{StaticResource AdventureModTooltipStyle}">
		<StackPanel
			MaxWidth="700"
			Background="Transparent"
			Orientation="Vertical">
			<StackPanel.Resources>
				<Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="TextBlock">
					<Setter Property="TextWrapping" Value="Wrap" />
					<Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUI:Brushes.ForegroundBrush}}" />
				</Style>
				<Style BasedOn="{StaticResource {x:Type ListBox}}" TargetType="ListBox" />
			</StackPanel.Resources>
			<StackPanel Orientation="Horizontal">
				<TextBlock
					Margin="2"
					FontSize="16"
					FontWeight="Bold"
					Foreground="{DynamicResource {x:Static adonisUI:Brushes.AlertBrush}}"
					Text="{Binding Name}">
					<TextBlock.Effect>
						<DropShadowEffect
							BlurRadius="4"
							Direction="330"
							Opacity="0.5"
							ShadowDepth="4"
							Color="Black" />
					</TextBlock.Effect>
				</TextBlock>
				<TextBlock
					Margin="2"
					Foreground="Red"
					Text=" (Classic)"
					Visibility="{Binding IsClassicMod, Converter={StaticResource BoolToVisibilityConverter}}" />
				<TextBlock
					Margin="2"
					Foreground="Lime"
					Text=" (Definitive Edition)"
					Visibility="{Binding IsClassicMod, Converter={StaticResource BoolToVisibilityConverterReversed}}" />
			</StackPanel>
			<Separator Background="{DynamicResource {x:Static adonisUI:Brushes.Layer1HighlightBorderBrush}}" />
			<TextBlock
				Margin="2"
				TextWrapping="Wrap"
				Visibility="{Binding AuthorVisibility}"><Run Text="Created by " /><Run
					FontWeight="Bold"
					Foreground="#3da2fa"
					Text="{Binding Author}" />
				<TextBlock.Effect>
					<DropShadowEffect
						BlurRadius="4"
						Direction="330"
						Opacity="0.5"
						ShadowDepth="4"
						Color="Black" />
				</TextBlock.Effect>
			</TextBlock>
			<TextBlock
				Margin="2"
				Text="{Binding Description}"
				TextWrapping="Wrap"
				Visibility="{Binding DescriptionVisibility}" />
			<StackPanel
				Margin="2"
				DataContext="{Binding}"
				Orientation="Vertical">
				<StackPanel.Resources>
					<CollectionViewSource x:Key="TagsSource" Source="{Binding Tags}" />
					<CompositeCollection x:Key="CombinedTags">
						<Border
							Background="{DynamicResource {x:Static divThemes:DivinityColors.ModeTagBackgroundBrush}}"
							BorderThickness="2"
							CornerRadius="12">
							<TextBlock
								Padding="12,2"
								Foreground="{DynamicResource {x:Static adonisUI:Brushes.Layer3InteractionForegroundBrush}}"
								Text="GM Campaign">
								<TextBlock.Effect>
									<DropShadowEffect
										BlurRadius="4"
										Direction="330"
										Opacity="0.5"
										ShadowDepth="4"
										Color="Black" />
								</TextBlock.Effect>
							</TextBlock>
							<Border.Effect>
								<DropShadowEffect
									BlurRadius="4"
									Direction="330"
									Opacity="0.35"
									ShadowDepth="2"
									Color="Black" />
							</Border.Effect>
						</Border>
						<CollectionContainer Collection="{Binding Source={StaticResource TagsSource}}" />
					</CompositeCollection>
				</StackPanel.Resources>
				<ItemsControl ItemTemplateSelector="{StaticResource TagTemplateSelector}" ItemsSource="{StaticResource CombinedTags}">
					<ItemsControl.ItemsPanel>
						<ItemsPanelTemplate>
							<StackPanel Orientation="Horizontal" />
						</ItemsPanelTemplate>
					</ItemsControl.ItemsPanel>
					<ItemsControl.Style>
						<Style>
							<Style.Triggers>
								<DataTrigger Binding="{Binding}" />
							</Style.Triggers>
						</Style>
					</ItemsControl.Style>
				</ItemsControl>
			</StackPanel>
			<StackPanel Orientation="Vertical">
				<Separator Background="{DynamicResource {x:Static adonisUI:Brushes.Layer1HighlightBorderBrush}}" />
				<TextBlock Margin="2" Text="{Binding Folder}" />
			</StackPanel>
		</StackPanel>
	</controls:AutomationTooltip>
	<DataTemplate x:Key="ModNameTemplate" DataType="{x:Type data:DivinityModData}">
		<controls:ModEntryGrid>
			<controls:ModEntryGrid.ColumnDefinitions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="Auto" />
			</controls:ModEntryGrid.ColumnDefinitions>
			<TextBlock
				x:Name="ModNameText"
				HorizontalAlignment="Stretch"
				Tag="{Binding}"
				Text="{Binding DisplayName}"
				ToolTip="{StaticResource ModToolTip}"
				ToolTipService.IsEnabled="{Binding HasToolTip}" />
			<StackPanel Grid.Column="1" Orientation="Horizontal">
				<Image
					x:Name="ExtenderStatusImage"
					Width="16"
					Height="16"
					MaxWidth="16"
					MaxHeight="16"
					HorizontalAlignment="Center"
					VerticalAlignment="Center"
					DataContext="{Binding}"
					RenderOptions.BitmapScalingMode="HighQuality"
					Stretch="UniformToFill"
					ToolTip="{Binding ScriptExtenderSupportToolTipText}">
					<Image.Style>
						<Style TargetType="{x:Type Image}">
							<Style.Triggers>
								<DataTrigger Binding="{Binding Path=ExtenderModStatus}" Value="{x:Static dapp:DivinityExtenderModStatus.NONE}">
									<Setter Property="Source" Value="{x:Null}" />
								</DataTrigger>
								<DataTrigger Binding="{Binding Path=ExtenderModStatus}" Value="{x:Static dapp:DivinityExtenderModStatus.REQUIRED_MISSING}">
									<Setter Property="Source" Value="{StaticResource AlertBar_Danger}" />
									<Setter Property="Opacity" Value="1.0" />
								</DataTrigger>
								<DataTrigger Binding="{Binding Path=ExtenderModStatus}" Value="{x:Static dapp:DivinityExtenderModStatus.REQUIRED_DISABLED}">
									<Setter Property="Source" Value="{StaticResource AlertBar_Danger}" />
									<Setter Property="Opacity" Value="1.0" />
								</DataTrigger>
								<DataTrigger Binding="{Binding Path=ExtenderModStatus}" Value="{x:Static dapp:DivinityExtenderModStatus.REQUIRED_OLD}">
									<Setter Property="Source" Value="{StaticResource AlertBar_Warning}" />
									<Setter Property="Opacity" Value="1.0" />
								</DataTrigger>
								<DataTrigger Binding="{Binding Path=ExtenderModStatus}" Value="{x:Static dapp:DivinityExtenderModStatus.REQUIRED}">
									<Setter Property="Source" Value="{StaticResource DivinityEngine2}" />
									<Setter Property="Opacity" Value="1.0" />
								</DataTrigger>
								<DataTrigger Binding="{Binding Path=ExtenderModStatus}" Value="{x:Static dapp:DivinityExtenderModStatus.SUPPORTS}">
									<Setter Property="Source" Value="{StaticResource DivinityEngine2}" />
									<Setter Property="Opacity" Value="0.5" />
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</Image.Style>
				</Image>
			</StackPanel>
		</controls:ModEntryGrid>
	</DataTemplate>
	<Style
		x:Key="GridViewLeftContainerStyle"
		BasedOn="{StaticResource {x:Type GridViewColumnHeader}}"
		TargetType="{x:Type GridViewColumnHeader}">
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="Margin" Value="4,0,0,0" />
	</Style>
	<Style
		x:Key="GridViewCenteredContainerStyle"
		BasedOn="{StaticResource {x:Type GridViewColumnHeader}}"
		TargetType="{x:Type GridViewColumnHeader}">
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Margin" Value="2" />
	</Style>
	<DataTemplate x:Key="GridViewTextblockHeaderTemplate">
		<TextBlock Margin="2,0,2,0" Text="{Binding}" />
	</DataTemplate>
	<GridView
		x:Key="ModGridView"
		x:Shared="False"
		AllowsColumnReorder="True"
		ColumnHeaderContainerStyle="{StaticResource GridViewLeftContainerStyle}">
		<GridView.Columns>
			<GridViewColumn
				Width="40"
				behavior:ScreenReaderHelperBehavior.HelpText="The mod order index column"
				behavior:ScreenReaderHelperBehavior.Name="Index"
				Header="#"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock
							Margin="2,0,2,0"
							Background="Transparent"
							Text="{Binding Index}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn Width="400" CellTemplate="{StaticResource ModNameTemplate}">
				<GridViewColumn.Header>
					<TextBlock Text="Name" />
				</GridViewColumn.Header>
			</GridViewColumn>
			<GridViewColumn
				Width="80"
				Header="Version"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding Version.Version}" ToolTip="{Binding Version.Version}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="100"
				Header="Author"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding Author}" ToolTip="{Binding Author}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="Auto"
				Header="Last Updated"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding LastUpdated, StringFormat={x:Static dapp:DivinityApp.DateTimeColumnFormat}}" ToolTip="{Binding LastUpdated, StringFormat={x:Static dapp:DivinityApp.DateTimeTooltipFormat}}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
		</GridView.Columns>
	</GridView>
	<Style
		x:Key="GridViewHiddenLeftContainerStyle"
		BasedOn="{StaticResource {x:Type GridViewColumnHeader}}"
		TargetType="{x:Type GridViewColumnHeader}">
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="Margin" Value="4,0,0,0" />
		<Setter Property="Visibility" Value="Collapsed" />
	</Style>
	<GridView
		x:Key="HeaderlessModGridView"
		x:Shared="False"
		AllowsColumnReorder="False"
		ColumnHeaderContainerStyle="{StaticResource GridViewHiddenLeftContainerStyle}">
		<GridView.Columns>
			<GridViewColumn
				Width="40"
				behavior:ScreenReaderHelperBehavior.HelpText="The mod order index column"
				behavior:ScreenReaderHelperBehavior.Name="Index"
				Header="#"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock
							Margin="2,0,2,0"
							Background="Transparent"
							Text="{Binding Index}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn Width="400" CellTemplate="{StaticResource ModNameTemplate}">
				<GridViewColumn.Header>
					<TextBlock Text="Name" />
				</GridViewColumn.Header>
			</GridViewColumn>
			<GridViewColumn
				Width="80"
				Header="Version"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding Version.Version}" ToolTip="{Binding Version.Version}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="100"
				Header="Author"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding Author}" ToolTip="{Binding Author}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="Auto"
				Header="Last Updated"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding LastUpdated, StringFormat={x:Static dapp:DivinityApp.DateTimeColumnFormat}}" ToolTip="{Binding LastUpdated, StringFormat={x:Static dapp:DivinityApp.DateTimeTooltipFormat}}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
		</GridView.Columns>
	</GridView>
	<GridView
		x:Key="InactiveModGridView"
		x:Shared="False"
		AllowsColumnReorder="True"
		ColumnHeaderContainerStyle="{StaticResource GridViewLeftContainerStyle}">
		<GridView.Columns>
			<GridViewColumn
				Width="400"
				CellTemplate="{StaticResource ModNameTemplate}"
				Header="Name"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}" />
			<GridViewColumn
				Width="80"
				Header="Version"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding Version.Version}" ToolTip="{Binding Version.Version}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="100"
				Header="Author"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding Author}" ToolTip="{Binding Author}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="Auto"
				Header="Last Updated"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding LastUpdated, StringFormat={x:Static dapp:DivinityApp.DateTimeColumnFormat}}" ToolTip="{Binding LastUpdated, StringFormat={x:Static dapp:DivinityApp.DateTimeTooltipFormat}}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
		</GridView.Columns>
	</GridView>
	<GridView
		x:Key="NewModsGridView"
		x:Shared="False"
		AllowsColumnReorder="True"
		ColumnHeaderContainerStyle="{StaticResource GridViewLeftContainerStyle}">
		<GridView.Columns>
			<GridViewColumn Width="40" HeaderContainerStyle="{StaticResource GridViewCenteredContainerStyle}">
				<GridViewColumn.Header>
					<CheckBox
						HorizontalAlignment="Center"
						VerticalAlignment="Center"
						Command="{Binding SelectAllNewModsCommand}"
						CommandParameter="{Binding Path=IsChecked, RelativeSource={RelativeSource Mode=Self}}"
						IsChecked="{Binding AllNewModsSelected}" />
				</GridViewColumn.Header>
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<CheckBox
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							IsChecked="{Binding IsSelected}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="400"
				CellTemplate="{StaticResource ModNameTemplate}"
				Header="Name"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}" />
			<GridViewColumn
				Width="100"
				Header="Author"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding Author}" ToolTip="{Binding Author}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="80"
				Header="Version"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding Version.Version}" ToolTip="{Binding Version.Version}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="80"
				Header="Type"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding ModType}" ToolTip="{Binding ModType}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="Auto"
				Header="Modes"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding Targets}" ToolTip="{Binding Targets}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
		</GridView.Columns>
	</GridView>
	<DataTemplate x:Key="ModUpdateNameTemplate" DataType="{x:Type data:DivinityModUpdateData}">
		<ContentControl Content="{Binding WorkshopMod}" ContentTemplate="{StaticResource ModNameTemplate}" />
	</DataTemplate>
	<GridView
		x:Key="ModUpdatesGridView"
		x:Shared="False"
		AllowsColumnReorder="True"
		ColumnHeaderContainerStyle="{StaticResource GridViewLeftContainerStyle}">
		<GridView.Columns>
			<GridViewColumn Width="40" HeaderContainerStyle="{StaticResource GridViewCenteredContainerStyle}">
				<GridViewColumn.Header>
					<CheckBox
						HorizontalAlignment="Center"
						VerticalAlignment="Center"
						Command="{Binding SelectAllUpdatesCommand}"
						CommandParameter="{Binding Path=IsChecked, RelativeSource={RelativeSource Mode=Self}}"
						IsChecked="{Binding AllModUpdatesSelected}" />
				</GridViewColumn.Header>
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<CheckBox
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							IsChecked="{Binding IsSelected}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="400"
				CellTemplate="{StaticResource ModUpdateNameTemplate}"
				Header="Name"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}" />
			<GridViewColumn
				Width="100"
				Header="Author"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding WorkshopMod.Author}" ToolTip="{Binding WorkshopMod.Author}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="80"
				Header="Current"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.HeaderContainerStyle>
					<Style BasedOn="{StaticResource GridViewLeftContainerStyle}" TargetType="{x:Type GridViewColumnHeader}">
						<Setter Property="Control.ToolTip" Value="Current Version" />
					</Style>
				</GridViewColumn.HeaderContainerStyle>
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding LocalMod.Version.Version}" ToolTip="{Binding LocalMod.Version.Version}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="80"
				Header="New"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.HeaderContainerStyle>
					<Style BasedOn="{StaticResource GridViewLeftContainerStyle}" TargetType="{x:Type GridViewColumnHeader}">
						<Setter Property="Control.ToolTip" Value="Workshop Mod's Version" />
					</Style>
				</GridViewColumn.HeaderContainerStyle>
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding WorkshopMod.Version.Version}" ToolTip="{Binding WorkshopMod.Version.Version}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="100"
				Header="Modified Date"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.HeaderContainerStyle>
					<Style BasedOn="{StaticResource GridViewLeftContainerStyle}" TargetType="{x:Type GridViewColumnHeader}">
						<Setter Property="Control.ToolTip" Value="Workshop Mod's Last Modified Date" />
					</Style>
				</GridViewColumn.HeaderContainerStyle>
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding WorkshopMod.LastModified, StringFormat={x:Static dapp:DivinityApp.DateTimeColumnFormat}}" ToolTip="{Binding WorkshopMod.LastModified, StringFormat={x:Static dapp:DivinityApp.DateTimeTooltipFormat}}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="80"
				Header="Type"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding WorkshopMod.ModType}" ToolTip="{Binding WorkshopMod.ModType}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="Auto"
				Header="Modes"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding WorkshopMod.Targets}" ToolTip="{Binding WorkshopMod.Targets}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
		</GridView.Columns>
	</GridView>
	<Style x:Key="BusyIndicatorProgressStyle" TargetType="{x:Type xc:BusyIndicator}">
		<Setter Property="OverlayStyle">
			<Setter.Value>
				<Style TargetType="Rectangle">
					<Setter Property="Fill" Value="{DynamicResource {x:Static adonisUI:Brushes.Layer4BackgroundBrush}}" />
					<!--<Setter Property="Opacity" Value="0.75" />-->
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="ProgressBarStyle">
			<Setter.Value>
				<Style BasedOn="{StaticResource {x:Type ProgressBar}}" TargetType="ProgressBar">
					<Setter Property="Visibility" Value="Collapsed" />
					<Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUI:Brushes.AccentInteractionBrush}}" />
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type xc:BusyIndicator}">
					<Grid>
						<ContentControl
							x:Name="content"
							HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
							Content="{TemplateBinding Content}"
							ContentTemplate="{TemplateBinding ContentTemplate}"
							Focusable="False"
							IsTabStop="False" />
						<Rectangle x:Name="overlay" Style="{TemplateBinding OverlayStyle}" />
						<ContentPresenter x:Name="busycontent">
							<ContentPresenter.Content>
								<Grid>
									<Grid.RowDefinitions>
										<RowDefinition Height="2*" />
										<RowDefinition Height="1*" />
										<RowDefinition Height="2*" />
									</Grid.RowDefinitions>
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="2*" />
										<ColumnDefinition Width="6*" />
										<ColumnDefinition Width="2*" />
									</Grid.ColumnDefinitions>
									<Grid
										Grid.Row="1"
										Grid.Column="1"
										HorizontalAlignment="Stretch"
										VerticalAlignment="Stretch">
										<Border
											Background="{DynamicResource {x:Static adonisUI:Brushes.Layer4BackgroundBrush}}"
											BorderBrush="{DynamicResource {x:Static adonisUI:Brushes.Layer4InteractionBorderBrush}}"
											BorderThickness="1"
											CornerRadius="2">
											<Border
												Margin="1"
												Background="{DynamicResource {x:Static adonisUI:Brushes.Layer1BackgroundBrush}}"
												CornerRadius="1.5">
												<Grid x:Name="_grid" MinWidth="150">
													<Grid.RowDefinitions>
														<RowDefinition />
														<RowDefinition Height="Auto" />
													</Grid.RowDefinitions>
													<ContentPresenter
														x:Name="busyContent"
														Margin="8"
														HorizontalAlignment="Stretch"
														Content="{TemplateBinding BusyContent}"
														ContentTemplate="{TemplateBinding BusyContentTemplate}" />
													<ProgressBar Grid.Row="1" Style="{TemplateBinding ProgressBarStyle}">
														<ProgressBar.Width>
															<MultiBinding Converter="{StaticResource ProgressBarWidthConverter}">
																<Binding ElementName="busyContent" Path="ActualWidth" />
																<Binding ElementName="_grid" Path="MinWidth" />
															</MultiBinding>
														</ProgressBar.Width>
													</ProgressBar>
												</Grid>
											</Border>
										</Border>
									</Grid>
								</Grid>
							</ContentPresenter.Content>
						</ContentPresenter>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="VisibilityStates">
								<VisualState x:Name="Hidden">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames
											BeginTime="00:00:00"
											Storyboard.TargetName="busycontent"
											Storyboard.TargetProperty="(UIElement.Visibility)"
											Duration="00:00:00.001">
											<DiscreteObjectKeyFrame KeyTime="00:00:00">
												<DiscreteObjectKeyFrame.Value>
													<Visibility>Collapsed</Visibility>
												</DiscreteObjectKeyFrame.Value>
											</DiscreteObjectKeyFrame>
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames
											BeginTime="00:00:00"
											Storyboard.TargetName="overlay"
											Storyboard.TargetProperty="(UIElement.Visibility)"
											Duration="00:00:00.001">
											<DiscreteObjectKeyFrame KeyTime="00:00:00">
												<DiscreteObjectKeyFrame.Value>
													<Visibility>Collapsed</Visibility>
												</DiscreteObjectKeyFrame.Value>
											</DiscreteObjectKeyFrame>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Visible">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames
											BeginTime="00:00:00"
											Storyboard.TargetName="busycontent"
											Storyboard.TargetProperty="(UIElement.Visibility)"
											Duration="00:00:00.001">
											<DiscreteObjectKeyFrame KeyTime="00:00:00">
												<DiscreteObjectKeyFrame.Value>
													<Visibility>Visible</Visibility>
												</DiscreteObjectKeyFrame.Value>
											</DiscreteObjectKeyFrame>
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames
											BeginTime="00:00:00"
											Storyboard.TargetName="overlay"
											Storyboard.TargetProperty="(UIElement.Visibility)"
											Duration="00:00:00.001">
											<DiscreteObjectKeyFrame KeyTime="00:00:00">
												<DiscreteObjectKeyFrame.Value>
													<Visibility>Visible</Visibility>
												</DiscreteObjectKeyFrame.Value>
											</DiscreteObjectKeyFrame>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="BusyStatusStates">
								<VisualState x:Name="Idle">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames
											BeginTime="00:00:00"
											Storyboard.TargetName="content"
											Storyboard.TargetProperty="(Control.IsEnabled)"
											Duration="00:00:00.001">
											<DiscreteObjectKeyFrame KeyTime="00:00:00">
												<DiscreteObjectKeyFrame.Value>
													<sys:Boolean>True</sys:Boolean>
												</DiscreteObjectKeyFrame.Value>
											</DiscreteObjectKeyFrame>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Busy">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames
											BeginTime="00:00:00"
											Storyboard.TargetName="content"
											Storyboard.TargetProperty="(Control.IsEnabled)"
											Duration="00:00:00.001">
											<DiscreteObjectKeyFrame KeyTime="00:00:00">
												<DiscreteObjectKeyFrame.Value>
													<sys:Boolean>False</sys:Boolean>
												</DiscreteObjectKeyFrame.Value>
											</DiscreteObjectKeyFrame>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="MessageBoxSelectableText" TargetType="{x:Type xc:MessageBox}">
		<Grid>
			<xc:WindowControl
				x:Name="PART_WindowControl"
				Background="{TemplateBinding Background}"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness="{TemplateBinding BorderThickness}"
				Caption="{TemplateBinding Caption}"
				CaptionFontSize="{TemplateBinding CaptionFontSize}"
				CaptionForeground="{TemplateBinding CaptionForeground}"
				CaptionIcon="{TemplateBinding CaptionIcon}"
				CaptionShadowBrush="{TemplateBinding CaptionShadowBrush}"
				CloseButtonStyle="{TemplateBinding CloseButtonStyle}"
				IsActive="{TemplateBinding IsActive}"
				WindowBackground="{TemplateBinding WindowBackground}"
				WindowBorderBrush="{TemplateBinding WindowBorderBrush}"
				WindowBorderThickness="{TemplateBinding WindowBorderThickness}"
				WindowInactiveBackground="{TemplateBinding WindowInactiveBackground}"
				WindowOpacity="{TemplateBinding WindowOpacity}">
				<xc:WindowControl.Content>
					<Grid MinWidth="350">
						<Grid.RowDefinitions>
							<RowDefinition />
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="*" />
							</Grid.ColumnDefinitions>
							<!--  Message Image  -->
							<Image
								x:Name="MessageBoxImage"
								VerticalAlignment="Top"
								SnapsToDevicePixels="True"
								Source="{TemplateBinding ImageSource}"
								Stretch="None" />
							<!--  Message Text  -->
							<ScrollViewer
								Grid.Column="1"
								Margin="2"
								VerticalScrollBarVisibility="Auto">
								<TextBox
									x:Name="MessageText"
									HorizontalAlignment="Stretch"
									VerticalAlignment="Stretch"
									FontFamily="{TemplateBinding FontFamily}"
									FontSize="{TemplateBinding FontSize}"
									FontStyle="{TemplateBinding FontStyle}"
									FontWeight="{TemplateBinding FontWeight}"
									Foreground="{TemplateBinding Foreground}"
									IsReadOnly="True"
									Text="{TemplateBinding Text}"
									TextWrapping="Wrap" />
							</ScrollViewer>
						</Grid>
						<!--  Buttons  -->
						<Border Grid.Row="1" Background="{TemplateBinding ButtonRegionBackground}">
							<Grid Margin="12">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>
								<Grid Grid.Column="0" HorizontalAlignment="Left">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="*" />
										<ColumnDefinition Width="*" />
									</Grid.ColumnDefinitions>
									<Button
										MinWidth="65"
										Margin="6,0,0,0"
										Padding="6,0,6,0"
										Command="{Binding Path=CopyToClipboardCommand, Source={x:Static dapp:DivinityApp.Commands}}"
										CommandParameter="{Binding ElementName=MessageText, Path=Text}"
										Content="Copy to Clipboard"
										Style="{TemplateBinding OkButtonStyle}"
										ToolTip="Copy to Clipboard" />
									<Button
										Grid.Column="1"
										MinWidth="65"
										Margin="6,0,0,0"
										Padding="6,0,6,0"
										Command="{Binding Path=ClearMissingModsCommand, Source={x:Static dapp:DivinityApp.Commands}}"
										Content="Remove All Missing"
										Style="{TemplateBinding OkButtonStyle}"
										ToolTip="Remove all missing mods from the load order." />
								</Grid>
								<Grid Grid.Column="1" HorizontalAlignment="Right">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
									</Grid.ColumnDefinitions>
									<Button
										x:Name="PART_YesButton"
										Grid.Column="0"
										MinWidth="65"
										Margin="6,0,0,0"
										Content="{TemplateBinding YesButtonContent}"
										Style="{TemplateBinding YesButtonStyle}"
										Visibility="Collapsed" />
									<Button
										x:Name="PART_NoButton"
										Grid.Column="1"
										MinWidth="65"
										Margin="6,0,0,0"
										Content="{TemplateBinding NoButtonContent}"
										Style="{TemplateBinding NoButtonStyle}"
										Visibility="Collapsed" />
									<Button
										x:Name="PART_OkButton"
										Grid.Column="2"
										MinWidth="65"
										Margin="6,0,0,0"
										Content="{TemplateBinding OkButtonContent}"
										Style="{TemplateBinding OkButtonStyle}"
										Visibility="Collapsed" />
									<Button
										x:Name="PART_CancelButton"
										Grid.Column="3"
										MinWidth="65"
										Margin="6,0,0,0"
										Content="{TemplateBinding CancelButtonContent}"
										IsCancel="True"
										Style="{TemplateBinding CancelButtonStyle}"
										Visibility="Collapsed" />
								</Grid>
							</Grid>
						</Border>
					</Grid>
				</xc:WindowControl.Content>
			</xc:WindowControl>
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="group1">
					<VisualState x:Name="OK">
						<Storyboard>
							<ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_OkButton" Storyboard.TargetProperty="Visibility">
								<DiscreteObjectKeyFrame KeyTime="0">
									<DiscreteObjectKeyFrame.Value>
										<Visibility>Visible</Visibility>
									</DiscreteObjectKeyFrame.Value>
								</DiscreteObjectKeyFrame>
							</ObjectAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="OKCancel">
						<Storyboard>
							<ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_OkButton" Storyboard.TargetProperty="Visibility">
								<DiscreteObjectKeyFrame KeyTime="0">
									<DiscreteObjectKeyFrame.Value>
										<Visibility>Visible</Visibility>
									</DiscreteObjectKeyFrame.Value>
								</DiscreteObjectKeyFrame>
							</ObjectAnimationUsingKeyFrames>
							<ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_CancelButton" Storyboard.TargetProperty="Visibility">
								<DiscreteObjectKeyFrame KeyTime="0">
									<DiscreteObjectKeyFrame.Value>
										<Visibility>Visible</Visibility>
									</DiscreteObjectKeyFrame.Value>
								</DiscreteObjectKeyFrame>
							</ObjectAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="YesNo">
						<Storyboard>
							<ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_YesButton" Storyboard.TargetProperty="Visibility">
								<DiscreteObjectKeyFrame KeyTime="0">
									<DiscreteObjectKeyFrame.Value>
										<Visibility>Visible</Visibility>
									</DiscreteObjectKeyFrame.Value>
								</DiscreteObjectKeyFrame>
							</ObjectAnimationUsingKeyFrames>
							<ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_NoButton" Storyboard.TargetProperty="Visibility">
								<DiscreteObjectKeyFrame KeyTime="0">
									<DiscreteObjectKeyFrame.Value>
										<Visibility>Visible</Visibility>
									</DiscreteObjectKeyFrame.Value>
								</DiscreteObjectKeyFrame>
							</ObjectAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="YesNoCancel">
						<Storyboard>
							<ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_YesButton" Storyboard.TargetProperty="Visibility">
								<DiscreteObjectKeyFrame KeyTime="0">
									<DiscreteObjectKeyFrame.Value>
										<Visibility>Visible</Visibility>
									</DiscreteObjectKeyFrame.Value>
								</DiscreteObjectKeyFrame>
							</ObjectAnimationUsingKeyFrames>
							<ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_NoButton" Storyboard.TargetProperty="Visibility">
								<DiscreteObjectKeyFrame KeyTime="0">
									<DiscreteObjectKeyFrame.Value>
										<Visibility>Visible</Visibility>
									</DiscreteObjectKeyFrame.Value>
								</DiscreteObjectKeyFrame>
							</ObjectAnimationUsingKeyFrames>
							<ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_CancelButton" Storyboard.TargetProperty="Visibility">
								<DiscreteObjectKeyFrame KeyTime="0">
									<DiscreteObjectKeyFrame.Value>
										<Visibility>Visible</Visibility>
									</DiscreteObjectKeyFrame.Value>
								</DiscreteObjectKeyFrame>
							</ObjectAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
		</Grid>
	</ControlTemplate>
	<DataTemplate x:Key="HotkeyTemplate" DataType="{x:Type appdata:IHotkey}">
		<controls:HotkeyEditorControl Hotkey="{Binding}" />
	</DataTemplate>

	<!--  Xceed WPF Toolkit  -->
	<SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type xcthemes:ResourceKeys}, ResourceId=ControlDisabledBackgroundKey}" Color="{DynamicResource {x:Static adonisUI:Colors.Layer0BackgroundColor}}" />
	<SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type xcthemes:ResourceKeys}, ResourceId=ControlDisabledBorderKey}" Color="{DynamicResource {x:Static adonisUI:Colors.Layer0BorderColor}}" />
	<SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type xcthemes:ResourceKeys}, ResourceId=ControlNormalBackgroundKey}" Color="{DynamicResource {x:Static adonisUI:Colors.Layer1BackgroundColor}}" />
	<SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type xcthemes:ResourceKeys}, ResourceId=ControlNormalBorderKey}" Color="{DynamicResource {x:Static adonisUI:Colors.Layer1BorderColor}}" />

	<DataTemplate x:Key="DefaultXCWatermarkTemplate">
		<ContentControl
			Margin="0,0,3,0"
			BorderBrush="{DynamicResource {x:Static adonisUI:Brushes.Layer1BorderBrush}}"
			BorderThickness="0"
			Content="{Binding}"
			Focusable="False"
			Foreground="{DynamicResource {x:Static adonisUI:Brushes.ForegroundBrush}}" />
	</DataTemplate>
	<Style BasedOn="{StaticResource {x:Type xc:IntegerUpDown}}" TargetType="{x:Type xc:IntegerUpDown}">
		<Setter Property="Background" Value="{DynamicResource {x:Static adonisUI:Brushes.Layer1BackgroundBrush}}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUI:Brushes.ForegroundBrush}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUI:Brushes.Layer1BorderBrush}}" />
		<Setter Property="WatermarkTemplate" Value="{StaticResource DefaultXCWatermarkTemplate}" />
		<Setter Property="BorderThickness" Value="0" />
	</Style>
	<Style BasedOn="{StaticResource {x:Type xc:DoubleUpDown}}" TargetType="{x:Type xc:DoubleUpDown}">
		<Setter Property="Background" Value="{DynamicResource {x:Static adonisUI:Brushes.Layer1BackgroundBrush}}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUI:Brushes.ForegroundBrush}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUI:Brushes.Layer1BorderBrush}}" />
		<Setter Property="WatermarkTemplate" Value="{StaticResource DefaultXCWatermarkTemplate}" />
		<Setter Property="BorderThickness" Value="0" />
	</Style>
	<Style BasedOn="{StaticResource {x:Type xc:LongUpDown}}" TargetType="{x:Type xc:LongUpDown}">
		<Setter Property="Background" Value="{DynamicResource {x:Static adonisUI:Brushes.Layer1BackgroundBrush}}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUI:Brushes.ForegroundBrush}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUI:Brushes.Layer1BorderBrush}}" />
		<Setter Property="WatermarkTemplate" Value="{StaticResource DefaultXCWatermarkTemplate}" />
		<Setter Property="BorderThickness" Value="0" />
	</Style>
	<Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type xcthemes:ResourceKeys}, ResourceId=SpinnerButtonStyleKey}" TargetType="RepeatButton">
		<Setter Property="Background" Value="{DynamicResource {x:Static adonisUI:Brushes.Layer1BackgroundBrush}}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUI:Brushes.ForegroundBrush}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUI:Brushes.Layer1BorderBrush}}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Padding" Value="2,2" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RepeatButton">
					<Grid>
						<chrome:ButtonChrome
							x:Name="Chrome"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="0"
							CornerRadius="{DynamicResource {x:Static xcthemes:ResourceKeys.SpinButtonCornerRadiusKey}}"
							RenderEnabled="{TemplateBinding IsEnabled}"
							RenderMouseOver="{TemplateBinding IsMouseOver}"
							RenderNormal="True"
							RenderPressed="{TemplateBinding IsPressed}"
							SnapsToDevicePixels="true" />

						<ContentPresenter
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--
	<SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type xcthemes:ResourceKeys}, ResourceId=ControlDisabledBackgroundKey}" Color="Red" />
	<SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type xcthemes:ResourceKeys}, ResourceId=ControlNormalBackgroundKey}" Color="Red" />
	<SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type xcthemes:ResourceKeys}, ResourceId=ButtonNormalBackgroundKey}" Color="Red" />
	<SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type xcthemes:ResourceKeys}, ResourceId=ButtonMouseOverBackgroundKey}" Color="Red" />
	<SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type xcthemes:ResourceKeys}, ResourceId=ButtonFocusedBackgroundKey}" Color="Red" />
	<Style x:Key="{x:Static xcthemes:ResourceKeys.SpinnerButtonStyleKey}" TargetType="RepeatButton">
		<Setter Property="Background" Value="Red" />
		<Setter Property="BorderBrush" Value="Pink" />
	</Style>
	-->

</ResourceDictionary>